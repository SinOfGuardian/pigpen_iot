plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id 'com.google.gms.google-services' // For Firebase
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// Uncomment and configure if you want to use a keystore for signing
// def keystoreProperties = new Properties()
// def keystorePropertiesFile = rootProject.file('key.properties')
// if (keystorePropertiesFile.exists()) {
//     keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
// }

android {
    namespace = "com.example.pigpen_iot"
    compileSdk = 35 // Update to the latest compileSdkVersion
    ndkVersion = "25.1.8937393"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = "com.example.pigpen_iot"
        minSdk = 23 // Minimum SDK version for notifications
        targetSdk = 35 // Update to the latest targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
        multiDexEnabled = true // Enable multidex support
    }

    // Uncomment and configure if you want to use a keystore for signing
    // signingConfigs {
    //     release {
    //         keyAlias keystoreProperties['keyAlias']
    //         keyPassword keystoreProperties['keyPassword']
    //         storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
    //         storePassword keystoreProperties['storePassword']
    //     }
    // }

    buildTypes {
        release {
            // Uncomment to use the release signing config
            // signingConfig signingConfigs.release
            signingConfig = signingConfigs.debug // Use debug signing for now (replace with release config for production)

            // Enable code shrinking and obfuscation for release builds
            minifyEnabled = true
            shrinkResources = true // Enable resource shrinking
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig = signingConfigs.debug
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    implementation platform('com.google.firebase:firebase-bom:32.7.0') // Use the latest Firebase BOM version
    implementation 'com.google.firebase:firebase-analytics' // Firebase Analytics
    implementation 'com.android.support:multidex:2.0.1' // Multidex support
    implementation 'androidx.work:work-runtime:2.8.1' // WorkManager for background tasks
    implementation 'androidx.core:core-ktx:1.12.0' // AndroidX Core KTX
    implementation 'com.google.android.gms:play-services-basement:18.2.0' // Play Services Basement
    implementation 'com.google.android.gms:play-services-auth:20.7.0' // Firebase Auth
    implementation 'com.google.android.gms:play-services-location:21.0.1' // Location services
}